# Zookeeper入门
提供集群管理服务，为分布式框架提供协调服务
负责存储和管理数据，接受观察者注册，并会将数据的变更通知给观察者

个人理解：
Zookeeper实际存储的数据类似Unix文件目录，每个目录下会存放集群中服务器的数据信息以及它的子目录
安装Zookeeper的服务器可以通过客户端操作来对集群机器进行上下线、配置同步等等操作
## 特点
1. 一个Leader与多个Follower组成的集群
2. 存在半数以上服务器存活即可正常使用
3. 全局数据一致性
4. 更新请求会在所有服务器上按照请求顺序顺序执行
5. 数据更新具有原子性
6. 实时性，在一定时间范围内，客户端能读到最新数据
## 数据结构
类似与Unix文件系统，整体是一棵树，节点ZNode通过路径唯一标识，每个节点容量默认为1MB
## 应用场景
分布式应用中对集群进行管理，包括统一配置、命名、服务器动态上下线、负载均衡等。
+ 命名：对服务进行命名，对部署该服务的服务器进行统一命名，并在访问时自动转发
+ 配置：对集群进行统一配置，通过将配置信息写入Zookeeper的一个ZNode，各个服务器监听该节点，该节点文件修改后，Zookeeper通知这些服务器
+ 集群管理：监控节点状态，通过节点将信息写入到ZNode，其他Client可以在该ZNode注册，监听该节点的信息
+ 服务器动态增减：服务器节点上线/下线后，Zookeeper通知各个客户端，客户端重新获取服务器列表，并进行监听
+ 软负载均衡：对某个服务，为该服务下的服务器合理分配客户端请求

# Zookeeper配置
具体配置过程略过
## zoo.cfg参数
+ tickTime=1000 心跳通信时间
+ initLimit=10 LF初始通信时限，(计算方式为initLimit * tickTime)
+ syncLimit=5 LF同步时限 (syncLimit * tickTime)
+ dataDir 数据目录
+ clientPort=2181 客户端连接端口

# Zookeeper集群操作
## 选举机制
配置完Zookeeper集群并启动后，可以通过zkServer.sh status查看节点状态，可以看到存在一个leader和多个follwer

### ZXID
ZXID为Zookeeper的事务id，64位，高32位作为Epoch，低32位每次请求都会递增，用于事务计数，每次Zookeeper集群状态改变都会作为一次事务进行记录

Epoch即Leader的代号，用于表示某个事务执行时Leader是那个，每次Leader变化都会加1


### 初次启动
服务器启动后均为Looking状态
如果依次启动三台服务器，
第一台S1启动后，S1投票给自己，但得票数不超过((int)3/2 + 1，即2)，保持Looking状态，
第二台S2启动后，S2投票给自己，S1投票给自己，但是S2的myid > S1的myid，S1改为投票给S2，S2获得两票，大于半数，S2作为leader，S2状态改为Leading，S1改为Following
第三台S3启动后，不存在Looking状态的服务器，S3投票给自己，并与S2交换选票信息，S2 > S3，S3改为投给S2，状态更改为Following

### 非初次启动
Follower无法与Leader通信后，该Follower会重新选举
+ 若集群中存在Leader，则该Follower会被通知Leader信息，随后该Follower与Leader连接，同步即可
+ 若集群中无Leader，则根据(EPOCH, ZXID, SID)依次进行比较，较大者胜出，EPOCH优先级最高

## zkCli
### ZNode 详细参数
重要参数
+ mzxid: znode最后一次事务id
+ pzxid：znode最后更新的子节点的zxid
+ cversion：znode子节点修改次数
+ dataversion：znode数据变化号
+ aclVersion：znode访问控制列表的变化号
+ ephemeralOwner：znode为临时节点时，该znode拥有者的session id，否则为0
+ numChildren：子节点数量

### ZNode 类型
+ Persistent，cli与server断开不删除，通过create命令创建
+ Ephemeral，cli与server断开后删除，在create命令添加参数 -e 
+ sequential，针对持久与临时节点，可以为两者添加标记，标记从0开始递增，不论是持久节点还是临时节点，服务器重启后不会重新计数，在create命令添加参数 -s即可

### 监听器
cli注册监听某些ZNode，当这些ZNode发生变动，ZK通知该cli，在get与ls命令添加参数 -w 即可监听某一目录，get监听数据变化，ls监控子节点变化

每次注册仅生效一次！

#### 原理
1. cli启动一个zkCli，并创建两个线程connect与listener
2. connect将注册的监听事件发送给Zookeeper
3. zkServer注册该监听器
4. 通过listener传输信息
5. listener内部调用process()
## Cli向Server写数据流程
### 写请求发送给Leader节点
1. Cli 向 Leader写数据
2. Leader向Follower写数据
3. Follower接受后向Leader返回ack信号
4. 如果已经有半数以上的服务器写入了数据，则Leader向Cli发送ack信号，否则继续执行2、3
5. Leader跟剩余Follower执行过程2、3

### 写请求发送给Follwer节点
1. Cli向Follower发送写请求
2. Follower将请求转发给Leader
3. 同理，Leader开始写，并将写请求发送给Follower，直到到达半数以上
4. 到达半数以上后，Leader将发送ack信号给初始的Follower，由该Follower发送ack信号给Cli
5. Leader继续发送写请求给剩余Follower

# 动态上下线监听
## 需求
分布式系统中，任意一台Client都可以实时感知到主节点服务器的上下线
### 实现方式
主要在Client类中添加对应监听逻辑即可

# Zookeeper分布式锁
分布式锁用于在分布式环境下，即多个进程之间保证一个方法或变量同一时间仅能被一个进程访问

## 业务需求
监听自己是否为当前最小节点，是则获取锁，不是则对其前一个节点进行监听
获取到锁之后，处理业务，删除该节点，释放锁
### 补充知识
CountDownLatch，用于线程计数，当数量到0时，继续执行
## Curator

